version: '3'

services:
  traefik:
    image: traefik
    container_name: traefik
    command: --api --web --metrics.prometheus --metrics.prometheus.buckets="0.1,0.3,1.2,5.0" --docker --logLevel=DEBUG
    networks:
      - monitoring
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/null:/traefik.toml
    labels:
      traefik.enable: true
      traefik.docker.network: monitoring
      traefik.port: 8080
      traefik.backend: traefik
      traefik.logLevel: DEBUG
      traefik.docker.endpoint: unix:///var/run/docker.sock
      traefik.docker.domain: docker.localhost
      traefik.docker.watch: true

  api:
    container_name: api
    restart: always
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    command: gunicorn -w 1 -b :5000 app:app
    networks:
      - monitoring
    labels:
      traefik.backend: api
      traefik.docker.network: monitoring
      traefik.frontend.rule: Host:iapi.localhost
      traefik.port: 5000

  notebook:
    container_name: jupyter_lab
    restart: always
    build:
      context: ./
      dockerfile: ./jupyter/Dockerfile
    networks:
      - monitoring
    ports:
      - "8888:8888"
    volumes:
      - ./jupyter:/home/jupyterlab

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    labels:
            traefik.backend: cadvisor
            traefik.docker.network: monitoring
            traefik.frontend.rule: Host:cadvisor.localhost
            traefik.port: 80

  node-exporter:
    image: prom/node-exporter:v0.17.0
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring
    labels:
            traefik.backend: node-exporter
            traefik.docker.network: monitoring
            traefik.frontend.rule: Host:nodeexporter.localhost
            traefik.port: 9100
            org.label-schema.group: "monitoring"

  prometheus:
    image: prom/prometheus:v2.9.1
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
    networks:
      - monitoring
    labels:
            traefik.backend: prometheus
            traefik.docker.network: monitoring
            traefik.frontend.rule: Host:prometheus.localhost
            traefik.port: 9090
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter

  alertmanager:
    image: prom/alertmanager:v0.16.2
    container_name: alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - monitoring
    labels:
            traefik.backend: alertmanager
            traefik.docker.network: monitoring
            traefik.frontend.rule: Host:alertmanager.localhost
            traefik.port: 9093

  grafana:
    image: grafana/grafana:4.6.2
    container_name:   grafana
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitoring
    labels:
            traefik.backend: grafana
            traefik.docker.network: monitoring
            traefik.frontend.rule: Host:grafana.localhost
            traefik.port: 3000

  doccano:
    image: chakkiworks/doccano
    container_name: doccano
    volumes:
      - doccano-data:/doccano
    networks:
      - monitoring
    labels:
            traefik.backend: doccano
            traefik.docker.network: monitoring
            traefik.frontend.rule: Host:doccano.localhost
            traefik.port: 80
volumes:
  prometheus-data: {}
  grafana-data: {}
  doccano-data: {}

networks:
  monitoring:
    driver: bridge